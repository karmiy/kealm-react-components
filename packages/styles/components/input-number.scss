@import "../mixins/index";
@import "../common/var";

@include b(input-number) {
    position: relative;
    display: inline-block;
    width: $input-number-width;
    line-height: #{$input-number-height - 2};

    .km-input {
        display: block;

        &__inner {
            padding-left: #{$input-number-height + 10};
            padding-right: #{$input-number-height + 10};
            text-align: center;
        }
    }

    &:hover:not(.is-disabled) {
        .km-input__inner {
            border-color: $input-number-color-hover;
        }
    }

    @include e((increase, decrease)) {
        position: absolute;
        width: $input-number-height;
        height: auto;
        top: 1px;
        z-index: 1;
        background-color: $input-number-handler-background-color;
        font-size: $input-number-handler-font-size;
        color: $input-number-handler-color;
        text-align: center;
        cursor: pointer;
        user-select: none;

        [class*=km-icon] {
            vertical-align: middle;
        }

        &:hover {
            color: $input-number-color-hover;

            /*&:not(.is-disabled) ~ .km-input .km-input__inner:not(.is-disabled) {
                border-color: $input-number-color-hover;
            }*/
        }

        @include when(disabled){
            color: $input-number-handler-color-disabled;
            cursor: not-allowed;
        }
    }

    @include e(increase) {
        right: 1px;
        border-left: $border-base;
        border-radius: 0 $border-radius-base $border-radius-base 0;
    }

    @include e(decrease) {
        left: 1px;
        border-right: $border-base;
        border-radius: $border-radius-base 0 0 $border-radius-base;
    }

    @include when(disabled) {
        @include e((increase, decrease)) {
            border-color: $input-number-handler-border-color-disabled;
            color: $input-number-handler-color-disabled;

            &:hover {
                color: $input-number-handler-color-disabled;
                cursor: not-allowed;
            }
        }
    }

    @include m(large) {
        width: $input-number-width-large;
        line-height: #{$input-number-height-large - 2};

        @include e((increase, decrease)) {
            width: $input-number-height-large;
            font-size: $input-number-handler-font-size + 2px;
        }

        .km-input__inner {
            padding-left: #{$input-number-height-large + 12};
            padding-right: #{$input-number-height-large + 12};
        }
    }

    @include m(small) {
        width: $input-number-width-small;
        line-height: #{$input-number-height-small - 2};

        @include e((increase, decrease)) {
            width: $input-number-height-small;
            font-size: $font-size-small;

            [class*=km-icon] {
                transform: scale(.9);
            }
        }

        .km-input__inner {
            padding-left: #{$input-number-height-small + 8};
            padding-right: #{$input-number-height-small + 8};
        }
    }

    @include when(controls-right) {
        width: $input-number-width-traditional;

        .km-input__inner {
            padding-left: 11px;
            padding-right: #{$input-number-handler-width-right + 6};
            text-align: left;
        }

        @include e((increase, decrease)) {
            width: $input-number-handler-width-right;
            height: #{($input-number-height - 2) / 2};
            line-height: #{($input-number-height - 2) / 2};
            background-color: $color-white;

            &:hover:not(.is-disabled) {
                @include utils-little-bold($input-number-color-hover);
            }

            @include when(disabled) {
                background-color: $input-number-handler-background-color;
            }

            [class*=km-icon] {
                transform: scale(.6);
            }
        }

        @include e(increase) {
            border-bottom: $border-base;
            border-radius: 0 $border-radius-base 0 0;
        }

        @include e(decrease) {
            top: auto;
            border-right: none;
            right: 1px;
            bottom: 1px;
            left: auto;
            border-left: $border-base;
            border-radius: 0 0 $border-radius-base 0;
        }

        &[class*=small] {
            [class*=increase], [class*=decrease] {
                height: #{($input-number-height-small - 2) / 2};
                line-height: #{($input-number-height-small - 2) / 2};
            }
        }

        &[class*=large] {
            [class*=increase], [class*=decrease] {
                height: #{($input-number-height-large - 2) / 2};
                line-height: #{($input-number-height-large - 2) / 2};
            }
        }
    }
}
