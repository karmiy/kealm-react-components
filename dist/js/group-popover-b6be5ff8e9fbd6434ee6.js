(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{495:function(e,t,n){"use strict";n.r(t);var l=n(8),o=n.n(l),a=n(0),r=n.n(a),i=n(147),c=[{param:"trigger",des:"触发方式",type:"string",option:"click / focus / hover / manual",default:"click"},{param:"defaultVisible",des:"默认是否显示",type:"boolean",option:"--",default:"false"},{param:"visible",des:"用于手动控制浮层显示隐藏",type:"boolean",option:"--",default:"false"},{param:"title",des:"标题",type:"string / ReactNode",option:"--",default:"--"},{param:"content",des:"显示的内容",type:"string / ReactNode",option:"--",default:"--"},{param:"disabled",des:"是否禁用",type:"boolean",option:"--",default:"false"},{param:"width",des:"宽度",type:"number",option:"--",default:"--"},{param:"placement",des:"出现的位置",type:"string",option:"top / top-start / top-end / bottom / bottom-start / bottom-end / left / left-start / left-end / right / right-start / right-end",default:"top"},{param:"offset",des:"出现位置的偏移量，如 '20, 30' 表示水平方向 20px, 垂直方向 30px，更多表示方法参考 popper.js",type:"string",option:"--",default:"0"},{param:"showArrow",des:"是否显示箭头",type:"boolean",option:"--",default:"true"},{param:"openDelay",des:"触发方式为 hover 时的显示延迟，单位为毫秒",type:"number",option:"--",default:"0"},{param:"closeDelay",des:"触发方式为 hover 时的隐藏延迟，单位为毫秒",type:"number",option:"--",default:"200"},{param:"transitionName",des:"过渡动画样式",type:"string",option:{link:"/component/transition",info:"参考 Transition 组件"},default:"km-popper"}],p=[{name:"onVisibleChange",des:"显示隐藏的回调",callback:"(visible) => void"}],m=n(24),s={TL:"top-start",Top:"top",TR:"top-end",BL:"bottom-start",Bottom:"bottom",BR:"bottom-end",LT:"left-start",Left:"left",LB:"left-end",RT:"right-start",Right:"right",RB:"right-end"};function u(e){return r.a.createElement(i.p,{placement:s[e],title:"Title",content:"This is a simple content."},r.a.createElement(i.c,{plain:!0},e))}t.default=function(){var e=Object(a.useState)(!1),t=o()(e,2),n=t[0],l=t[1];return r.a.createElement("div",{className:"page-box"},r.a.createElement("h1",null,"Popover 弹出框"),r.a.createElement("p",null,"点击/鼠标移入元素，弹出气泡式的卡片浮层。"),r.a.createElement("p",null,"与 Tooltip 的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等"),r.a.createElement("h2",null,"基本用法"),r.a.createElement("p",null,"最简单的用法，4种触发方式。"),r.a.createElement("div",{className:"detail-box"},Object(a.useMemo)((function(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(i.p,{trigger:"hover",title:"Title",content:"This is a simple content."},r.a.createElement(i.c,{plain:!0},"Hover")),r.a.createElement(i.p,{title:"Title",content:"This is a simple content."},r.a.createElement(i.c,{plain:!0},"Click")),r.a.createElement(i.p,{trigger:"focus",title:"Title",content:"This is a simple content."},r.a.createElement(i.c,{plain:!0},"Focus")))}),[]),Object(a.useMemo)((function(){return r.a.createElement(i.p,{visible:n,trigger:"manual",title:"Title",content:"This is a simple content."},r.a.createElement(i.c,{plain:!0,onClick:function(){return l((function(e){return!e}))}},"Manual"))}),[n])),r.a.createElement(m.d,{code:"    import { useState } from 'react';\n    import { Popover, Button } from \"@kealm/react-components\";\n    \n    function Demo() {\n        const [visible, setVisible] = useState(false);\n        \n        return (\n            <div>\n                <Popover\n                    trigger={'hover'}\n                    title={'Title'}\n                    content={'This is a simple content.'}\n                >\n                    <Button plain>Hover</Button>\n                </Popover>\n                <Popover\n                    title={'Title'}\n                    content={'This is a simple content.'}\n                >\n                    <Button plain>Click</Button>\n                </Popover>\n                <Popover\n                    trigger={'focus'}\n                    title={'Title'}\n                    content={'This is a simple content.'}\n                >\n                    <Button plain>Focus</Button>\n                </Popover>\n                <Popover\n                    visible={visible}\n                    trigger={'manual'}\n                    title={'Title'}\n                    content={'This is a simple content.'}\n                >\n                    <Button plain onClick={() => setVisible(v => !v)}>Manual</Button>\n                </Popover>\n            </div>\n        )\n    }"}),r.a.createElement("h2",null,"嵌套操作"),r.a.createElement("p",null,"可以在 Popover 中嵌套更多的内容。"),r.a.createElement("div",{className:"detail-box"},Object(a.useMemo)((function(){return r.a.createElement(i.p,{trigger:"hover",content:r.a.createElement("div",null,r.a.createElement(i.r,{style:{marginBottom:"15px"}},r.a.createElement(i.f,null,r.a.createElement("p",null,"Are you sure to delete this record ?"))),r.a.createElement(i.r,{type:"flex",justify:"end",gutter:8},r.a.createElement(i.f,null,r.a.createElement(i.c,null,"Cancel")),r.a.createElement(i.f,null,r.a.createElement(i.c,{type:"primary"},"OK"))))},r.a.createElement(i.c,{plain:!0},"Delete"))}))),r.a.createElement(m.d,{code:"    import { Popover, Button, Row, Col } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Popover\n            trigger={'hover'}\n            content={\n                <div>\n                    <Row style={{marginBottom: '15px'}}>\n                        <Col><p>Are you sure to delete this record ?</p></Col>\n                    </Row>\n                    <Row type={'flex'} justify={'end'} gutter={8}>\n                        <Col><Button>Cancel</Button></Col>\n                        <Col><Button type={'primary'}>OK</Button></Col>\n                    </Row>\n                </div>\n            }\n        >\n            <Button plain>Delete</Button>\n        </Popover>,\n        mountNode\n    );"}),r.a.createElement("h2",null,"位置"),r.a.createElement("p",null,"拥有12个不同的方向。"),Object(a.useMemo)((function(){return r.a.createElement("div",{className:"detail-box popover-placement-demo"},r.a.createElement(i.r,{type:"flex",justify:"center",gutter:16},r.a.createElement(i.f,null,u("TL")),r.a.createElement(i.f,null,u("Top")),r.a.createElement(i.f,null,u("TR"))),r.a.createElement(i.r,{type:"flex",justify:"space-between"},r.a.createElement(i.f,null,u("LT")),r.a.createElement(i.f,null,u("RT"))),r.a.createElement(i.r,{type:"flex",justify:"space-between"},r.a.createElement(i.f,null,u("Left")),r.a.createElement(i.f,null,u("Right"))),r.a.createElement(i.r,{type:"flex",justify:"space-between"},r.a.createElement(i.f,null,u("LB")),r.a.createElement(i.f,null,u("RB"))),r.a.createElement(i.r,{type:"flex",justify:"center",gutter:16},r.a.createElement(i.f,null,u("BL")),r.a.createElement(i.f,null,u("Bottom")),r.a.createElement(i.f,null,u("BR"))))}),[]),r.a.createElement(m.d,{code:"    import { Popover, Button, Row, Col } from \"@kealm/react-components\";\n    \n    const places = {\n        TL: 'top-start',\n        Top: 'top',\n        TR: 'top-end',\n        BL: 'bottom-start',\n        Bottom: 'bottom',\n        BR: 'bottom-end',\n        LT: 'left-start',\n        Left: 'left',\n        LB: 'left-end',\n        RT: 'right-start',\n        Right: 'right',\n        RB: 'right-end',\n    }\n    \n    function renderPlacement(placement) {\n        return (\n            <Popover\n                placement={places[placement]}\n                title={'Title'}\n                content={'This is a simple content.'}\n            >\n                <Button plain>{placement}</Button>\n            </Popover>\n        )\n    }\n    \n    ReactDom.render(\n        <div className=\"detail-box popover-placement-demo\">\n            <Row type={'flex'} justify={'center'} gutter={16}>\n                <Col>{renderPlacement('TL')}</Col>\n                <Col>{renderPlacement('Top')}</Col>\n                <Col>{renderPlacement('TR')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'space-between'}>\n                <Col>{renderPlacement('LT')}</Col>\n                <Col>{renderPlacement('RT')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'space-between'}>\n                <Col>{renderPlacement('Left')}</Col>\n                <Col>{renderPlacement('Right')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'space-between'}>\n                <Col>{renderPlacement('LB')}</Col>\n                <Col>{renderPlacement('RB')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'center'} gutter={16}>\n                <Col>{renderPlacement('BL')}</Col>\n                <Col>{renderPlacement('Bottom')}</Col>\n                <Col>{renderPlacement('BR')}</Col>\n            </Row>\n        </div>,\n        mountNode\n    );"}),Object(a.useMemo)((function(){return r.a.createElement(m.a,{title:"Popover",propsList:c,eventsList:p})}),[]))}}}]);
//# sourceMappingURL=group-popover-b6be5ff8e9fbd6434ee6.js.map