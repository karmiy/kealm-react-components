(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{493:function(e,n,t){"use strict";t.r(n);var a=t(41),l=t.n(a),o=t(0),s=t.n(o),c=t(147),r=t(24),i=[{param:"content",des:"提示内容",type:"string / ReactNode / config",option:"--",default:"--"},{param:"duration",des:"自动关闭的延时，单位秒。设为 0 时不自动关闭",type:"number",option:"--",default:"3000"},{param:"icon",des:"自定义图标",type:"ReactNode",option:"--",default:"--"},{param:"key",des:"当前提示的唯一标志",type:"string",option:"--",default:"--"}],m=[{name:"onMount",des:"组件挂载时触发",callback:"(el: HTMLElement) => void"},{name:"onClose",des:"关闭时触发的回调函数",callback:"() => void"}];n.default=function(){return s.a.createElement("div",{className:"page-box"},s.a.createElement("h1",null,"Message 消息提示"),s.a.createElement("p",null,"全局展示操作反馈信息。"),s.a.createElement("h2",null,"基本用法"),s.a.createElement("p",null,"从顶部出现，3 秒后自动消失。"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){return c.B.info("This is a normal message")}},"Display normal message"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button\n            plain\n            onClick={() => message.info('This is a normal message')}\n        >Display normal message</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"不同状态"),s.a.createElement("p",null,"用来显示「成功、警告、消息、错误」类的操作反馈。"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.r,{gutter:16},s.a.createElement(c.f,null,s.a.createElement(c.c,{plain:!0,onClick:function(){return c.B.success("This is a success message")}},"Success")),s.a.createElement(c.f,null,s.a.createElement(c.c,{plain:!0,onClick:function(){return c.B.warning("This is a warning message")}},"Warning")),s.a.createElement(c.f,null,s.a.createElement(c.c,{plain:!0,onClick:function(){return c.B.error("This is an error message")}},"Error")),s.a.createElement(c.f,null,s.a.createElement(c.c,{plain:!0,onClick:function(){return c.B.info("This is an info message")}},"Info"))))}),[]),s.a.createElement(r.d,{code:"    import { message, Button, Row, Col } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Row gutter={16}>\n            <Col>\n                <Button plain onClick={() => message.success('This is a success message')}>Success</Button>\n            </Col>\n            <Col>\n                <Button plain onClick={() => message.warning('This is a warning message')}>Warning</Button>\n            </Col>\n            <Col>\n                <Button plain onClick={() => message.error('This is an error message')}>Error</Button>\n            </Col>\n            <Col>\n                <Button plain onClick={() => message.info('This is an info message')}>Info</Button>\n            </Col>\n        </Row>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"自定义图标"),s.a.createElement("p",null,"配置 icon 搭配自定义图标。"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){c.B.open({content:"This is a success message",icon:s.a.createElement(c.l,{type:"location",style:{color:"#1394ff"}})})}},"Customized display icon"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button, Icon } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button plain onClick={() => {\n            message.open({\n                content: 'This is a success message',\n                icon: <Icon type={'location'} style={{color: '#1394ff'}} />\n            })\n        }}>Customized display icon</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"自定义延时"),s.a.createElement("p",null,"自定义时长 10s，默认时长为 3s。"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){return c.B.success("This is a prompt message for success, and it will disappear in 10 seconds",1e4)}},"Customized display duration"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button\n            plain\n            onClick={() => message.success('This is a prompt message for success, and it will disappear in 10 seconds', 10000)}\n        >Customized display duration</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"加载中"),s.a.createElement("p",null,"当延时设置为 0 时，不会自动关闭"),s.a.createElement("p",null,"进行全局 loading，异步自行移除。"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){var e=c.B.loading("Action in progress...",0);l()(e,2500)}},"Display a loading indicator"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button\n            plain\n            onClick={() => {\n                const close = message.loading('Action in progress...', 0);\n                setTimeout(close, 2500);\n            }}\n        >Display a loading indicator</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"Promise 接口"),s.a.createElement("p",null,"当延时设置为 0 时，不会自动关闭"),s.a.createElement("p",null,"可以通过 then 接口在关闭后运行 callback 。以上用例将在每个 message 将要结束时通过 then 显示新的 message。"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){c.B.loading("Action in progress..",2500).then((function(){return c.B.success("Loading finished",2500)})).then((function(){return c.B.info("Loading finished is finished",2500)}))}},"Display sequential messages"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button\n            plain\n            onClick={() => {\n                message\n                    .loading('Action in progress..', 2500)\n                    .then(() => message.success('Loading finished', 2500))\n                    .then(() => message.info('Loading finished is finished', 2500));\n            }}\n        >Display sequential messages</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"更新消息内容"),s.a.createElement("p",null,"可以通过返回的 key 来更新内容，key 值也可以自行配置"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){var e=c.B.loading({content:"Loading..."});l()((function(){c.B.update(e.key,{type:"success",content:"Loaded"})}),2500)}},"Open the message box"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button\n            plain\n            onClick={() => {\n                const fn = message.loading({ content: 'Loading...'});\n                setTimeout(() => {\n                    message.update(fn.key, {\n                        type: 'success',\n                        content: 'Loaded',\n                    });\n                }, 2500);\n            }}\n        >Open the message box</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"销毁消息提示"),s.a.createElement("p",null,"可以通过 message.destroy 销毁所有的消息提示"),Object(o.useMemo)((function(){return s.a.createElement("div",{className:"detail-box"},s.a.createElement(c.c,{plain:!0,onClick:function(){var e=5;!function n(){e&&(e--,c.B.loading({content:"Loading...",onMount:n,duration:0}))}(),l()(c.B.destroy,4e3)}},"Destroy all messages after 4 seconds"))}),[]),s.a.createElement(r.d,{code:"    import { message, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Button\n            plain\n            onClick={() => {\n                let count = 5;\n                function createMessage() {\n                    console.log(count);\n                    if(!count) return;\n                    count--;\n                    message.loading({\n                        content: 'Loading...',\n                        onMount: createMessage,\n                        duration: 0,\n                    });\n                }\n                createMessage();\n                setTimeout(message.destroy, 4000);\n            }}\n        >Destroy all messages after 4 seconds</Button>,\n        mountNode\n    );"}),s.a.createElement("h2",null,"Message methods"),s.a.createElement("p",null,"组件提供了一些静态方法，使用方式和参数如下："),s.a.createElement("ul",null,s.a.createElement("li",null,"message.success(content, duration, onClose)"),s.a.createElement("li",null,"message.warning(content, duration, onClose)"),s.a.createElement("li",null,"message.info(content, duration, onClose)"),s.a.createElement("li",null,"message.error(content, duration, onClose)"),s.a.createElement("li",null,"message.loading(content, duration, onClose)")),s.a.createElement("p",null,"也可以对象的形式传递参数："),s.a.createElement("ul",null,s.a.createElement("li",null,"message.success(config)"),s.a.createElement("li",null,"message.warning(config)"),s.a.createElement("li",null,"message.info(config)"),s.a.createElement("li",null,"message.error(config)"),s.a.createElement("li",null,"message.loading(config)")),s.a.createElement("p",null,"这些方法调用后将返回 promise 接口："),s.a.createElement("ul",null,s.a.createElement("li",null,"message[level](content, duration, onClose).then(afterClose)"),s.a.createElement("li",null,"message[level](config).then(afterClose)")),s.a.createElement("p",null,"当需要更新组件的内容或状态时，组件提供了相应的更新方法："),s.a.createElement("ul",null,s.a.createElement("li",null,"message.update(config)")),s.a.createElement(r.a,{title:"Message Method",propsList:i,eventsList:m}),s.a.createElement("h2",null,"全局方法"),s.a.createElement("p",null,"还提供了全局配置和全局销毁方法："),s.a.createElement("ul",null,s.a.createElement("li",null,"message.config(options)"),s.a.createElement("li",null,"message.destroy()")),s.a.createElement(r.d,{collapsible:!1,code:"    message.config({\n        top: 100,\n        duration: 2,\n        maxCount: 3,\n    });"}),s.a.createElement("h2",null,"Options"),s.a.createElement("table",null,s.a.createElement("thead",null,s.a.createElement("tr",null,s.a.createElement("th",null,"参数"),s.a.createElement("th",null,"说明"),s.a.createElement("th",null,"类型"),s.a.createElement("th",null,"可选"),s.a.createElement("th",null,"默认值"))),s.a.createElement("tbody",null,s.a.createElement("tr",null,s.a.createElement("td",null,"duration"),s.a.createElement("td",null,"默认自动关闭延时，单位秒"),s.a.createElement("td",null,"number"),s.a.createElement("td",null,"--"),s.a.createElement("td",null,"3000")),s.a.createElement("tr",null,s.a.createElement("td",null,"getContainer"),s.a.createElement("td",null,"配置渲染节点的输出位置"),s.a.createElement("td",null,"() => HTMLElement"),s.a.createElement("td",null,"--"),s.a.createElement("td",null,"() => document.body")),s.a.createElement("tr",null,s.a.createElement("td",null,"maxCount"),s.a.createElement("td",null,"最大显示数, 超过限制时，最早的消息会被自动关闭"),s.a.createElement("td",null,"number"),s.a.createElement("td",null,"--"),s.a.createElement("td",null,"--")),s.a.createElement("tr",null,s.a.createElement("td",null,"top"),s.a.createElement("td",null,"消息距离顶部的位置"),s.a.createElement("td",null,"number"),s.a.createElement("td",null,"--"),s.a.createElement("td",null,"20")))))}}}]);
//# sourceMappingURL=group-message-98d79dc5e41f9c0814d8.js.map