(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{488:function(e,n,t){"use strict";t.r(n);var a=t(525),o=t.n(a),l=t(131),i=t.n(l),r=t(41),s=t.n(r),c=t(8),p=t.n(c),u=t(0),m=t.n(u),d=t(147),f=t(24),g=[{param:"visible",des:"对话框是否可见",type:"boolean",option:"--",default:"false"},{param:"title",des:"标题",type:"string / ReactNode",option:"--",default:"--"},{param:"bodyStyle",des:"Dialog body 样式",type:"object",option:"--",default:"--"},{param:"destroyOnClose",des:"关闭时销毁 Mask 与 Dialog 元素",type:"boolean",option:"--",default:"false"},{param:"keyboard",des:"是否支持键盘 esc 关闭",type:"boolean",option:"--",default:"true"},{param:"confirmLoading",des:"确定按钮 loading",type:"boolean",option:"--",default:"false"},{param:"mask",des:"是否展示遮罩",type:"boolean",option:"--",default:"true"},{param:"maskClosable",des:"点击遮罩是否允许关闭",type:"boolean",option:"--",default:"true"},{param:"maskClassName",des:"遮罩类名",type:"string",option:"--",default:"--"},{param:"wrapClassName",des:"对话框外层容器的类名",type:"string",option:"--",default:"--"},{param:"closable",des:"是否显示右上角的关闭按钮",type:"boolean",option:"--",default:"true"},{param:"closeIcon",des:"自定义关闭图标",type:"ReactNode",option:"--",default:{link:"/component/icon",info:'<Icon type="close" />'}},{param:"footer",des:"底部内容，当不需要默认底部按钮时，可以设为 footer={null}",type:"string / ReactNode",option:"--",default:"确定取消按钮"},{param:"okText",des:"确认按钮文字",type:"string / ReactNode",option:"--",default:"确定 / 知道了(信息提示)"},{param:"cancelText",des:"取消按钮文字",type:"string / ReactNode",option:"--",default:"取消"},{param:"showOk",des:"是否显示确定按钮",type:"boolean",option:"--",default:"true"},{param:"showCancel",des:"是否显示取消按钮",type:"boolean",option:"--",default:"true"},{param:"okButtonProps",des:"ok 按钮 props",type:"object",option:{link:"/component/button",info:"Button"},default:"--"},{param:"cancelButtonProps",des:"cancel 按钮 props",type:"object",option:{link:"/component/button",info:"Button"},default:"--"},{param:"getContainer",des:"指定 Dialog 挂载的 HTML 节点, null 为挂载在当前 dom",type:"HTMLElement | () => HTMLElement",option:"--",default:"document.body"},{param:"center",des:"垂直居中展示",type:"boolean",option:"--",default:"false"}],h=[{name:"onOk",des:"点击确定回调",callback:"(e: Event)"},{name:"onCancel",des:"点击遮罩层或右上角叉或取消按钮的回调",callback:"(e: Event)"},{name:"afterClose",des:"Dialog 完全关闭后的回调",callback:"() => void"}],b=[{param:"content",des:"内容",type:"string / ReactNode",option:"--",default:"--"},{param:"icon",des:"自定义图标",type:"string / ReactNode",option:"--",default:"--"},{param:"closeAfterOk",des:"点击确定后关闭窗口",type:"boolean",option:"--",default:"true"}],k=[{name:"onOk",des:"点击确定回调，可以返回Promise",callback:"(e: Event) => void / Promise"},{name:"afterOk",des:"onOk执行回调完成后触发，通常用于配合返回Promise的onOk",callback:"(e: Event, info?: any, status?: boolean)"}];n.default=function(){var e=Object(u.useState)(!1),n=p()(e,2),t=n[0],a=n[1],l=Object(u.useState)(!1),r=p()(l,2),c=r[0],y=r[1],E=Object(u.useState)(!1),C=p()(E,2),T=C[0],v=C[1],D=Object(u.useState)(!1),B=p()(D,2),j=B[0],O=B[1],w=Object(u.useState)(!1),A=p()(w,2),S=A[0],V=A[1],P=Object(u.useState)(!1),x=p()(P,2),F=x[0],N=x[1],L=Object(u.useState)(!1),M=p()(L,2),I=M[0],z=M[1],R=Object(u.useCallback)((function(){v(!0),s()((function(){v(!1),y(!1)}),2e3)}),[]),H=Object(u.useCallback)((function(){d.j.confirm({title:"Are you sure delete this task?",content:"This is a paragraph"})}),[]),J=Object(u.useCallback)((function(){d.j.confirm({title:"Are you sure delete this task?",content:"This is a paragraph",okButtonProps:{type:"danger"}})}),[]),W=Object(u.useCallback)((function(){var e=d.j.confirm({title:"Are you sure delete this task?",content:"This is a paragraph",footer:m.a.createElement(m.a.Fragment,null,m.a.createElement(d.c,{key:"cancel",onClick:function(){return e()}},"Cancel"),m.a.createElement(d.c,{key:"ok",type:"success"},"Delete"))}).destroy}),[]),$=Object(u.useCallback)((function(){d.j.confirm({title:"Are you sure delete this task?",content:"This is a paragraph",onOk:function(){return new i.a((function(e){s()((function(){e("success")}),2e3)}))},afterOk:function(e,n,t){console.log(e,n,t)}})}),[]),q=Object(u.useCallback)((function(){d.j.info({title:"This is a notification message",content:m.a.createElement(m.a.Fragment,null,m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))})}),[]),G=Object(u.useCallback)((function(){d.j.success({title:"This is a notification message",content:m.a.createElement(m.a.Fragment,null,m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))})}),[]),K=Object(u.useCallback)((function(){d.j.error({title:"This is a notification message",content:m.a.createElement(m.a.Fragment,null,m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))})}),[]),Q=Object(u.useCallback)((function(){d.j.warning({title:"This is a notification message",content:m.a.createElement(m.a.Fragment,null,m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))})}),[]),U=Object(u.useCallback)((function(){var e=5,n=d.j.success({title:"This is a notification message",content:"It will be destroyed after ".concat(e," second."),onOk:function(){clearInterval(l),t()}}),t=n.destroy,a=n.update,l=o()((function(){e--,a({content:"It will be destroyed after ".concat(e," second.")}),0===e&&(clearInterval(l),t())}),1e3)}),[]),X=Object(u.useCallback)((function(){for(var e=0;e<3;e++)s()((function(){d.j.confirm({title:"This is a notification message",content:m.a.createElement(d.c,{plain:!0,onClick:d.j.destroyAll},"Click to destroy all")})}),500*e+100)}),[]);return m.a.createElement("div",{className:"page-box"},m.a.createElement("h1",null,"Dialog 对话框"),m.a.createElement("p",null,"在保留当前页面状态的情况下，告知用户并承载相关操作。"),m.a.createElement("h2",null,"基本用法"),m.a.createElement("p",null,"Dialog 弹出一个对话框，适合需要定制性更大的场景。"),m.a.createElement("div",{className:"detail-box"},m.a.createElement(d.c,{type:"primary",onClick:function(){return a((function(e){return!e}))}},"Open Dialog"),Object(u.useMemo)((function(){return m.a.createElement(d.j,{title:"Basic",visible:t,onCancel:function(){return a(!1)}},m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))}),[t])),m.a.createElement(f.d,{code:"    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visible, setVisible] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisible(v => !v)}>Open Dialog</Button>\n                <Dialog title={'Basic'} visible={visible} onCancel={() => setVisible(false)}>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"异步关闭"),m.a.createElement("p",null,"点击确定后异步关闭对话框，例如提交表单。"),m.a.createElement("div",{className:"detail-box"},m.a.createElement(d.c,{type:"primary",onClick:function(){return y((function(e){return!e}))}},"Async logic"),Object(u.useMemo)((function(){return m.a.createElement(d.j,{visible:c,title:"Async Logic",confirmLoading:T,onCancel:function(){return y(!1)},onOk:R},m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))}),[c,T])),m.a.createElement(f.d,{code:"    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleAsync, setVisibleAsync] = useState(false);\n        const [loading, setLoading] = useState(false);\n        \n        const handleOk = useCallback(() => {\n            setLoading(true);\n            setTimeout(() => {\n                setLoading(false);\n                setVisibleAsync(false);\n            }, 2000)\n        }, []);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleAsync(v => !v)}>Async logic</Button>\n                <Dialog\n                    visible={visibleAsync}\n                    title={'Async Logic'}\n                    confirmLoading={loading}\n                    onCancel={() => setVisibleAsync(false)}\n                    onOk={handleOk}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"自定义页脚"),m.a.createElement("p",null,"通过配置 footer 自定义页脚的按钮。"),m.a.createElement("p",null,"当不需要页脚时，可以将 footer 设为 null。"),m.a.createElement("div",{className:"detail-box"},m.a.createElement(d.c,{type:"primary",onClick:function(){return O((function(e){return!e}))}},"Customized footer"),Object(u.useMemo)((function(){return m.a.createElement(d.j,{visible:j,title:"Custom Footer",onCancel:function(){return O(!1)},footer:[m.a.createElement(d.c,{key:"cancel",onClick:function(){return O(!1)}},"关闭"),m.a.createElement(d.c,{key:"submit",type:"success",onClick:function(){return O(!1)}},"提交")]},m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))}),[j])),m.a.createElement(f.d,{code:"    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleFooter, setVisibleFooter] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleFooter(v => !v)}>Customized footer</Button>\n                <Dialog\n                    visible={visibleFooter}\n                    title={'Custom Footer'}\n                    onCancel={() => setVisibleFooter(false)}\n                    footer={[\n                        <Button key={'cancel'} onClick={() => setVisibleFooter(false)}>关闭</Button>,\n                        <Button key={'submit'} type='success' onClick={() => setVisibleFooter(false)}>提交</Button>\n                    ]}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"页脚按钮属性"),m.a.createElement("p",null,"传入 okButtonProps 和 cancelButtonProps 可分别自定义确定按钮和取消按钮的 props。"),m.a.createElement("div",{className:"detail-box"},m.a.createElement(d.c,{type:"primary",onClick:function(){return V((function(e){return!e}))}},"Customized button props"),Object(u.useMemo)((function(){return m.a.createElement(d.j,{visible:S,title:"Customized Button Props",onCancel:function(){return V(!1)},okButtonProps:{disabled:!0},cancelButtonProps:{disabled:!0}},m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))}),[S])),m.a.createElement(f.d,{code:"    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleBtnProps, setVisibleBtnProps] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleBtnProps(v => !v)}>Customized button props</Button>\n                <Dialog\n                    visible={visibleBtnProps}\n                    title={'Customized Button Props'}\n                    onCancel={() => setVisibleBtnProps(false)}\n                    okButtonProps={{disabled: true}}\n                    cancelButtonProps={{disabled: true}}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"自定义位置"),m.a.createElement("p",null,"使用 center 或类似 style.top 的样式来设置对话框位置。"),m.a.createElement("div",{className:"detail-box"},m.a.createElement(d.c,{type:"primary",onClick:function(){return N((function(e){return!e}))}},"Dialog at 20px to Top"),m.a.createElement(d.c,{type:"primary",onClick:function(){return z((function(e){return!e}))}},"Vertically centered dialog"),Object(u.useMemo)((function(){return m.a.createElement(d.j,{visible:F,title:"20px to Top",style:{top:"20px"},onCancel:function(){return N(!1)}},m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))}),[F]),Object(u.useMemo)((function(){return m.a.createElement(d.j,{visible:I,title:"Vertically centered dialog",center:!0,onCancel:function(){return z(!1)}},m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"),m.a.createElement("p",null,"This is a paragraph"))}),[I])),m.a.createElement(f.d,{code:"    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleCustomTop, setVisibleCustomTop] = useState(false);\n        const [visibleCenter, setVisibleCenter] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleCustomTop(v => !v)}>Dialog at 20px to Top</Button>\n                <Button type={'primary'} onClick={() => setVisibleCenter(v => !v)}>Vertically centered dialog</Button>\n                <Dialog\n                    visible={visibleCustomTop}\n                    title={'20px to Top'}\n                    style={{top: '20px'}}\n                    onCancel={() => setVisibleCustomTop(false)}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n                <Dialog\n                    visible={visibleCenter}\n                    title={'Vertically centered dialog'}\n                    center\n                    onCancel={() => setVisibleCenter(false)}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"确认对话框"),m.a.createElement("p",null,"使用 confirm() 可以快捷地弹出确认框。"),m.a.createElement("div",{className:"detail-box"},Object(u.useMemo)((function(){return m.a.createElement(m.a.Fragment,null,m.a.createElement(d.c,{plain:!0,onClick:H},"Confirm"),m.a.createElement(d.c,{plain:!0,onClick:J},"Delete"),m.a.createElement(d.c,{plain:!0,onClick:W},"Customized footer"),m.a.createElement(d.c,{plain:!0,onClick:$},"Async logic"))}),[])),m.a.createElement(f.d,{code:"    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const showConfirm = useCallback(() => {\n        Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n            });\n        }, []);\n    \n        const showDeleteConfirm = useCallback(() => {\n            Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n                okButtonProps: {\n                    type: 'danger',\n                },\n            });\n        }, []);\n    \n        const showFooterConfirm = useCallback(() => {\n            const { destroy } = Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n                footer: (\n                    <>\n                        <Button key={'cancel'} onClick={() => destroy()}>Cancel</Button>\n                        <Button key={'ok'} type='success'>Delete</Button>\n                    </>\n                ),\n            });\n        }, []);\n    \n        const showAsyncLogic = useCallback(() => {\n            Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n                onOk: () => {\n                    return new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve('success');\n                        }, 2000);\n                    })\n                },\n                afterOk: (e, info, status) => {\n                    console.log(e, info, status);\n                }\n            });\n        }, []);\n        \n        return (\n            <div>\n                <Button plain onClick={showConfirm}>Confirm</Button>\n                <Button plain onClick={showDeleteConfirm}>Delete</Button>\n                <Button plain onClick={showFooterConfirm}>Customized footer</Button>\n                <Button plain onClick={showAsyncLogic}>Async logic</Button>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"信息提示"),m.a.createElement("p",null,"各种类型的信息提示，只提供一个按钮用于关闭。"),m.a.createElement("div",{className:"detail-box"},Object(u.useMemo)((function(){return m.a.createElement(m.a.Fragment,null,m.a.createElement(d.c,{type:"primary",plain:!0,onClick:q},"Info"),m.a.createElement(d.c,{type:"success",plain:!0,onClick:G},"Success"),m.a.createElement(d.c,{type:"danger",plain:!0,onClick:K},"Error"),m.a.createElement(d.c,{type:"warning",plain:!0,onClick:Q},"Warning"))}),[])),m.a.createElement(f.d,{code:"    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const info = useCallback(() => {\n           Dialog.info({\n               title: 'This is a notification message',\n               content: (\n                   <>\n                       <p>This is a paragraph</p>\n                       <p>This is a paragraph</p>\n                       <p>This is a paragraph</p>\n                   </>\n               ),\n           });\n        }, []);\n    \n        const success = useCallback(() => {\n            Dialog.success({\n                title: 'This is a notification message',\n                content: (\n                    <>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                    </>\n                ),\n            });\n        }, []);\n    \n        const error = useCallback(() => {\n            Dialog.error({\n                title: 'This is a notification message',\n                content: (\n                    <>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                    </>\n                ),\n            });\n        }, []);\n    \n        const warning = useCallback(() => {\n            Dialog.warning({\n                title: 'This is a notification message',\n                content: (\n                    <>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                    </>\n                ),\n            });\n        }, []);\n        \n        return (\n            <div>\n                <Button type={'primary'} plain onClick={info}>Info</Button>\n                <Button type={'success'} plain onClick={success}>Success</Button>\n                <Button type={'danger'} plain onClick={error}>Error</Button>\n                <Button type={'warning'} plain onClick={warning}>Warning</Button>\n            </div>\n        )\n    }"}),m.a.createElement("h2",null,"手动更新和移除"),m.a.createElement("p",null,"手动更新和关闭 Dialog.method 方式创建的对话框。"),m.a.createElement("div",{className:"detail-box"},Object(u.useMemo)((function(){return m.a.createElement(m.a.Fragment,null,m.a.createElement(d.c,{plain:!0,onClick:U},"Close in 5s"))}),[])),m.a.createElement(f.d,{code:"    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const showCloseTimeout = useCallback(() => {\n            let seconds = 5;\n            const { destroy, update } = Dialog.success({\n                title: 'This is a notification message',\n                content: `It will be destroyed after ${seconds} second.`,\n                onOk: () => {\n                    clearInterval(timer);\n                    destroy();\n                }\n            });\n            const timer = setInterval(() => {\n                seconds--;\n                update({\n                    content: `It will be destroyed after ${seconds} second.`,\n                })\n                if(seconds === 0) {\n                    clearInterval(timer);\n                    destroy();\n                }\n            }, 1000);\n        }, []);\n        \n        return (\n            <Button plain onClick={showCloseTimeout}>Close in 5s</Button>\n        )\n    }"}),m.a.createElement("h2",null,"销毁确认对话框"),m.a.createElement("p",null,"使用 Dialog.destroyAll() 可以销毁弹出的确认窗。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题。"),m.a.createElement("div",{className:"detail-box"},Object(u.useMemo)((function(){return m.a.createElement(m.a.Fragment,null,m.a.createElement(d.c,{plain:!0,onClick:X},"Destroy all"))}),[])),m.a.createElement(f.d,{code:"    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const showDestroyAll = useCallback(() => {\n            for(let i = 0; i < 3; i++) {\n                setTimeout(() => {\n                    Dialog.confirm({\n                        title: 'This is a notification message',\n                        content: <Button plain onClick={Dialog.destroyAll}>Click to destroy all</Button>,\n                    });\n                }, i * 500 + 100);\n            }\n        }, []);\n        \n        return (\n            <Button plain onClick={showDestroyAll}>Destroy all</Button>\n        )\n    }"}),m.a.createElement(f.a,{title:"Dialog",propsList:g,eventsList:h}),m.a.createElement("h2",null,"Dialog methods"),m.a.createElement("p",null,"包括："),m.a.createElement("ul",null,m.a.createElement("li",null,"Dialog.confirm"),m.a.createElement("li",null,"Dialog.info"),m.a.createElement("li",null,"Dialog.success"),m.a.createElement("li",null,"Dialog.error"),m.a.createElement("li",null,"Dialog.warning")),m.a.createElement("p",null,"Dialog methods 均为一个函数，参数为Object"),m.a.createElement("p",null,"Dialog methods 的参数与 Dialog 的 API一致，并有如下补充："),Object(u.useMemo)((function(){return m.a.createElement(f.a,{title:"Dialog Method",propsList:b,eventsList:k})}),[]),m.a.createElement("p",null,"Dialog methods 调用后，会返回一个引用，可以通过该引用更新和销毁弹窗。"),m.a.createElement("p",null,"当打开多个窗口，需要全部销毁时，可以调用 Dialog.destroyAll 一次性销毁所有对话框。"),m.a.createElement(f.d,{collapsible:!1,code:"    import { Dialog } from \"@kealm/react-components\"\n\n    const { update, destroy } = Dialog.success({\n        title: '原本的标题',\n        content: '原本的内容',\n    });\n\n    update({\n      title: '修改的标题',\n      content: '修改的内容',\n    });\n    \n    destroy(); // 销毁对话框\n    \n    Dialog.error({\n        title: '错误的标题',\n        content: '错误的内容',\n    });\n    \n    Dialog.destroyAll(); // 销毁全部对话框"}))}},525:function(e,n,t){e.exports=t(526)},526:function(e,n,t){t(237);var a=t(33);e.exports=a.setInterval}}]);
//# sourceMappingURL=group-dialog-73d0799dd494ff7856d9.js.map