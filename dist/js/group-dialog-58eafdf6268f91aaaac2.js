(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{644:function(e,t,n){var a,l,o,i=n(0);"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,l=[t,n(687),n(162),n(70),n(14),n(2),n(161),n(22),n(689),n(690)],void 0===(o="function"==typeof(a=function(e,t,a,l,o,s,r,u,c,p){"use strict";var d=n(3),f=n(1);i(e,"__esModule",{value:!0}),e.default=void 0,t=f(t),a=f(a),l=f(l),o=f(o),s=d(s);var m=function(){var e=(0,s.useState)(!1),n=(0,o.default)(e,2),i=n[0],d=n[1],f=(0,s.useState)(!1),m=(0,o.default)(f,2),g=m[0],h=m[1],C=(0,s.useState)(!1),y=(0,o.default)(C,2),k=y[0],b=y[1],E=(0,s.useState)(!1),T=(0,o.default)(E,2),v=T[0],D=T[1],B=(0,s.useState)(!1),A=(0,o.default)(B,2),w=A[0],P=A[1],L=(0,s.useState)(!1),S=(0,o.default)(L,2),V=S[0],x=S[1],F=(0,s.useState)(!1),M=(0,o.default)(F,2),O=M[0],N=M[1],I=(0,s.useCallback)((function(){b(!0),(0,l.default)((function(){b(!1),h(!1)}),2e3)}),[]),H=(0,s.useCallback)((function(){r.Dialog.confirm({title:"Are you sure delete this task?",content:"This is a paragraph"})}),[]),z=(0,s.useCallback)((function(){r.Dialog.confirm({title:"Are you sure delete this task?",content:"This is a paragraph",okButtonProps:{type:"danger"}})}),[]),R=(0,s.useCallback)((function(){var e=r.Dialog.confirm({title:"Are you sure delete this task?",content:"This is a paragraph",footer:s.default.createElement(s.default.Fragment,null,s.default.createElement(r.Button,{key:"cancel",onClick:function(){return e()}},"Cancel"),s.default.createElement(r.Button,{key:"ok",type:"success"},"Delete"))}).destroy}),[]),_=(0,s.useCallback)((function(){r.Dialog.confirm({title:"Are you sure delete this task?",content:"This is a paragraph",onOk:function(){return new a.default((function(e){(0,l.default)((function(){e("success")}),2e3)}))},afterOk:function(e,t,n){console.log(e,t,n)}})}),[]),j=(0,s.useCallback)((function(){r.Dialog.info({title:"This is a notification message",content:s.default.createElement(s.default.Fragment,null,s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))})}),[]),J=(0,s.useCallback)((function(){r.Dialog.success({title:"This is a notification message",content:s.default.createElement(s.default.Fragment,null,s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))})}),[]),W=(0,s.useCallback)((function(){r.Dialog.error({title:"This is a notification message",content:s.default.createElement(s.default.Fragment,null,s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))})}),[]),$=(0,s.useCallback)((function(){r.Dialog.warning({title:"This is a notification message",content:s.default.createElement(s.default.Fragment,null,s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))})}),[]),q=(0,s.useCallback)((function(){var e=5,n=r.Dialog.success({title:"This is a notification message",content:"It will be destroyed after ".concat(e," second."),onOk:function(){clearInterval(o),a()}}),a=n.destroy,l=n.update,o=(0,t.default)((function(){e--,l({content:"It will be destroyed after ".concat(e," second.")}),0===e&&(clearInterval(o),a())}),1e3)}),[]),G=(0,s.useCallback)((function(){for(var e=0;e<3;e++)(0,l.default)((function(){r.Dialog.confirm({title:"This is a notification message",content:s.default.createElement(r.Button,{plain:!0,onClick:r.Dialog.destroyAll},"Click to destroy all")})}),500*e+100)}),[]);return s.default.createElement("div",{className:"page-box"},s.default.createElement("h1",null,"Dialog 对话框"),s.default.createElement("p",null,"在保留当前页面状态的情况下，告知用户并承载相关操作。"),s.default.createElement("h2",null,"基本用法"),s.default.createElement("p",null,"Dialog 弹出一个对话框，适合需要定制性更大的场景。"),s.default.createElement("div",{className:"detail-box"},s.default.createElement(r.Button,{type:"primary",onClick:function(){return d((function(e){return!e}))}},"Open Dialog"),(0,s.useMemo)((function(){return s.default.createElement(r.Dialog,{title:"Basic",visible:i,onCancel:function(){return d(!1)}},s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))}),[i])),s.default.createElement(u.HighLight,{code:p.CodeBasic}),s.default.createElement("h2",null,"异步关闭"),s.default.createElement("p",null,"点击确定后异步关闭对话框，例如提交表单。"),s.default.createElement("div",{className:"detail-box"},s.default.createElement(r.Button,{type:"primary",onClick:function(){return h((function(e){return!e}))}},"Async logic"),(0,s.useMemo)((function(){return s.default.createElement(r.Dialog,{visible:g,title:"Async Logic",confirmLoading:k,onCancel:function(){return h(!1)},onOk:I},s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))}),[g,k])),s.default.createElement(u.HighLight,{code:p.CodeAsync}),s.default.createElement("h2",null,"自定义页脚"),s.default.createElement("p",null,"通过配置 footer 自定义页脚的按钮。"),s.default.createElement("p",null,"当不需要页脚时，可以将 footer 设为 null。"),s.default.createElement("div",{className:"detail-box"},s.default.createElement(r.Button,{type:"primary",onClick:function(){return D((function(e){return!e}))}},"Customized footer"),(0,s.useMemo)((function(){return s.default.createElement(r.Dialog,{visible:v,title:"Custom Footer",onCancel:function(){return D(!1)},footer:[s.default.createElement(r.Button,{key:"cancel",onClick:function(){return D(!1)}},"关闭"),s.default.createElement(r.Button,{key:"submit",type:"success",onClick:function(){return D(!1)}},"提交")]},s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))}),[v])),s.default.createElement(u.HighLight,{code:p.CodeFooter}),s.default.createElement("h2",null,"页脚按钮属性"),s.default.createElement("p",null,"传入 okButtonProps 和 cancelButtonProps 可分别自定义确定按钮和取消按钮的 props。"),s.default.createElement("div",{className:"detail-box"},s.default.createElement(r.Button,{type:"primary",onClick:function(){return P((function(e){return!e}))}},"Customized button props"),(0,s.useMemo)((function(){return s.default.createElement(r.Dialog,{visible:w,title:"Customized Button Props",onCancel:function(){return P(!1)},okButtonProps:{disabled:!0},cancelButtonProps:{disabled:!0}},s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))}),[w])),s.default.createElement(u.HighLight,{code:p.CodeButtonProps}),s.default.createElement("h2",null,"自定义位置"),s.default.createElement("p",null,"使用 center 或类似 style.top 的样式来设置对话框位置。"),s.default.createElement("div",{className:"detail-box"},s.default.createElement(r.Button,{type:"primary",onClick:function(){return x((function(e){return!e}))}},"Dialog at 20px to Top"),s.default.createElement(r.Button,{type:"primary",onClick:function(){return N((function(e){return!e}))}},"Vertically centered dialog"),(0,s.useMemo)((function(){return s.default.createElement(r.Dialog,{visible:V,title:"20px to Top",style:{top:"20px"},onCancel:function(){return x(!1)}},s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))}),[V]),(0,s.useMemo)((function(){return s.default.createElement(r.Dialog,{visible:O,title:"Vertically centered dialog",center:!0,onCancel:function(){return N(!1)}},s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"),s.default.createElement("p",null,"This is a paragraph"))}),[O])),s.default.createElement(u.HighLight,{code:p.CodeCustomPosition}),s.default.createElement("h2",null,"确认对话框"),s.default.createElement("p",null,"使用 confirm() 可以快捷地弹出确认框。"),s.default.createElement("div",{className:"detail-box"},(0,s.useMemo)((function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement(r.Button,{plain:!0,onClick:H},"Confirm"),s.default.createElement(r.Button,{plain:!0,onClick:z},"Delete"),s.default.createElement(r.Button,{plain:!0,onClick:R},"Customized footer"),s.default.createElement(r.Button,{plain:!0,onClick:_},"Async logic"))}),[])),s.default.createElement(u.HighLight,{code:p.CodeConfirm}),s.default.createElement("h2",null,"信息提示"),s.default.createElement("p",null,"各种类型的信息提示，只提供一个按钮用于关闭。"),s.default.createElement("div",{className:"detail-box"},(0,s.useMemo)((function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement(r.Button,{type:"primary",plain:!0,onClick:j},"Info"),s.default.createElement(r.Button,{type:"success",plain:!0,onClick:J},"Success"),s.default.createElement(r.Button,{type:"danger",plain:!0,onClick:W},"Error"),s.default.createElement(r.Button,{type:"warning",plain:!0,onClick:$},"Warning"))}),[])),s.default.createElement(u.HighLight,{code:p.CodeInfoTip}),s.default.createElement("h2",null,"手动更新和移除"),s.default.createElement("p",null,"手动更新和关闭 Dialog.method 方式创建的对话框。"),s.default.createElement("div",{className:"detail-box"},(0,s.useMemo)((function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement(r.Button,{plain:!0,onClick:q},"Close in 5s"))}),[])),s.default.createElement(u.HighLight,{code:p.CodeCloseTimeout}),s.default.createElement("h2",null,"销毁确认对话框"),s.default.createElement("p",null,"使用 Dialog.destroyAll() 可以销毁弹出的确认窗。通常用于路由监听当中，处理路由前进、后退不能销毁确认对话框的问题。"),s.default.createElement("div",{className:"detail-box"},(0,s.useMemo)((function(){return s.default.createElement(s.default.Fragment,null,s.default.createElement(r.Button,{plain:!0,onClick:G},"Destroy all"))}),[])),s.default.createElement(u.HighLight,{code:p.CodeDestroyAll}),s.default.createElement(u.ApiTable,{title:"Dialog",propsList:c.dialogProps,eventsList:c.dialogEvents}),s.default.createElement("h2",null,"Dialog methods"),s.default.createElement("p",null,"包括："),s.default.createElement("ul",null,s.default.createElement("li",null,"Dialog.confirm"),s.default.createElement("li",null,"Dialog.info"),s.default.createElement("li",null,"Dialog.success"),s.default.createElement("li",null,"Dialog.error"),s.default.createElement("li",null,"Dialog.warning")),s.default.createElement("p",null,"Dialog methods 均为一个函数，参数为Object"),s.default.createElement("p",null,"Dialog methods 的参数与 Dialog 的 API一致，并有如下补充："),(0,s.useMemo)((function(){return s.default.createElement(u.ApiTable,{title:"Dialog Method",propsList:c.confirmProps,eventsList:c.confirmEvents})}),[]),s.default.createElement("p",null,"Dialog methods 调用后，会返回一个引用，可以通过该引用更新和销毁弹窗。"),s.default.createElement("p",null,"当打开多个窗口，需要全部销毁时，可以调用 Dialog.destroyAll 一次性销毁所有对话框。"),s.default.createElement(u.HighLight,{collapsible:!1,code:p.CodeMethod}))};e.default=m})?a.apply(t,l):a)||(e.exports=o)},687:function(e,t,n){e.exports=n(688)},688:function(e,t,n){n(241);var a=n(24);e.exports=a.setInterval},689:function(e,t,n){var a,l,o,i=n(0);"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,l=[t],void 0===(o="function"==typeof(a=function(e){"use strict";i(e,"__esModule",{value:!0}),e.confirmEvents=e.confirmProps=e.dialogEvents=e.dialogProps=void 0,e.dialogProps=[{param:"visible",des:"对话框是否可见",type:"boolean",option:"--",default:"false"},{param:"title",des:"标题",type:"string / ReactNode",option:"--",default:"--"},{param:"bodyStyle",des:"Dialog body 样式",type:"object",option:"--",default:"--"},{param:"destroyOnClose",des:"关闭时销毁 Mask 与 Dialog 元素",type:"boolean",option:"--",default:"false"},{param:"keyboard",des:"是否支持键盘 esc 关闭",type:"boolean",option:"--",default:"true"},{param:"confirmLoading",des:"确定按钮 loading",type:"boolean",option:"--",default:"false"},{param:"mask",des:"是否展示遮罩",type:"boolean",option:"--",default:"true"},{param:"maskClosable",des:"点击遮罩是否允许关闭",type:"boolean",option:"--",default:"true"},{param:"maskClassName",des:"遮罩类名",type:"string",option:"--",default:"--"},{param:"wrapClassName",des:"对话框外层容器的类名",type:"string",option:"--",default:"--"},{param:"closable",des:"是否显示右上角的关闭按钮",type:"boolean",option:"--",default:"true"},{param:"closeIcon",des:"自定义关闭图标",type:"ReactNode",option:"--",default:{link:"/component/icon",info:'<Icon type="close" />'}},{param:"footer",des:"底部内容，当不需要默认底部按钮时，可以设为 footer={null}",type:"string / ReactNode",option:"--",default:"确定取消按钮"},{param:"okText",des:"确认按钮文字",type:"string / ReactNode",option:"--",default:"确定 / 知道了(信息提示)"},{param:"cancelText",des:"取消按钮文字",type:"string / ReactNode",option:"--",default:"取消"},{param:"showOk",des:"是否显示确定按钮",type:"boolean",option:"--",default:"true"},{param:"showCancel",des:"是否显示取消按钮",type:"boolean",option:"--",default:"true"},{param:"okButtonProps",des:"ok 按钮 props",type:"object",option:{link:"/component/button",info:"Button"},default:"--"},{param:"cancelButtonProps",des:"cancel 按钮 props",type:"object",option:{link:"/component/button",info:"Button"},default:"--"},{param:"getContainer",des:"指定 Dialog 挂载的 HTML 节点, null 为挂载在当前 dom",type:"HTMLElement | () => HTMLElement",option:"--",default:"document.body"},{param:"center",des:"垂直居中展示",type:"boolean",option:"--",default:"false"}],e.dialogEvents=[{name:"onOk",des:"点击确定回调",callback:"(e: Event)"},{name:"onCancel",des:"点击遮罩层或右上角叉或取消按钮的回调",callback:"(e: Event)"},{name:"afterClose",des:"Dialog 完全关闭后的回调",callback:"() => void"}],e.confirmProps=[{param:"content",des:"内容",type:"string / ReactNode",option:"--",default:"--"},{param:"icon",des:"自定义图标",type:"string / ReactNode",option:"--",default:"--"},{param:"closeAfterOk",des:"点击确定后关闭窗口",type:"boolean",option:"--",default:"true"}],e.confirmEvents=[{name:"onOk",des:"点击确定回调，可以返回Promise",callback:"(e: Event) => void / Promise"},{name:"afterOk",des:"onOk执行回调完成后触发，通常用于配合返回Promise的onOk",callback:"(e: Event, info?: any, status?: boolean)"}]})?a.apply(t,l):a)||(e.exports=o)},690:function(e,t,n){var a,l,o,i=n(0);"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,l=[t],void 0===(o="function"==typeof(a=function(e){"use strict";i(e,"__esModule",{value:!0}),e.CodeMethod=e.CodeDestroyAll=e.CodeCloseTimeout=e.CodeInfoTip=e.CodeConfirm=e.CodeCustomPosition=e.CodeButtonProps=e.CodeFooter=e.CodeAsync=e.CodeBasic=void 0,e.CodeBasic="    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visible, setVisible] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisible(v => !v)}>Open Dialog</Button>\n                <Dialog title={'Basic'} visible={visible} onCancel={() => setVisible(false)}>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }",e.CodeAsync="    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleAsync, setVisibleAsync] = useState(false);\n        const [loading, setLoading] = useState(false);\n        \n        const handleOk = useCallback(() => {\n            setLoading(true);\n            setTimeout(() => {\n                setLoading(false);\n                setVisibleAsync(false);\n            }, 2000)\n        }, []);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleAsync(v => !v)}>Async logic</Button>\n                <Dialog\n                    visible={visibleAsync}\n                    title={'Async Logic'}\n                    confirmLoading={loading}\n                    onCancel={() => setVisibleAsync(false)}\n                    onOk={handleOk}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }",e.CodeFooter="    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleFooter, setVisibleFooter] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleFooter(v => !v)}>Customized footer</Button>\n                <Dialog\n                    visible={visibleFooter}\n                    title={'Custom Footer'}\n                    onCancel={() => setVisibleFooter(false)}\n                    footer={[\n                        <Button key={'cancel'} onClick={() => setVisibleFooter(false)}>关闭</Button>,\n                        <Button key={'submit'} type='success' onClick={() => setVisibleFooter(false)}>提交</Button>\n                    ]}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }",e.CodeButtonProps="    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleBtnProps, setVisibleBtnProps] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleBtnProps(v => !v)}>Customized button props</Button>\n                <Dialog\n                    visible={visibleBtnProps}\n                    title={'Customized Button Props'}\n                    onCancel={() => setVisibleBtnProps(false)}\n                    okButtonProps={{disabled: true}}\n                    cancelButtonProps={{disabled: true}}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }",e.CodeCustomPosition="    import { useState } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const [visibleCustomTop, setVisibleCustomTop] = useState(false);\n        const [visibleCenter, setVisibleCenter] = useState(false);\n        \n        return (\n            <div>\n                <Button type={'primary'} onClick={() => setVisibleCustomTop(v => !v)}>Dialog at 20px to Top</Button>\n                <Button type={'primary'} onClick={() => setVisibleCenter(v => !v)}>Vertically centered dialog</Button>\n                <Dialog\n                    visible={visibleCustomTop}\n                    title={'20px to Top'}\n                    style={{top: '20px'}}\n                    onCancel={() => setVisibleCustomTop(false)}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n                <Dialog\n                    visible={visibleCenter}\n                    title={'Vertically centered dialog'}\n                    center\n                    onCancel={() => setVisibleCenter(false)}\n                >\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                    <p>This is a paragraph</p>\n                </Dialog>\n            </div>\n        )\n    }",e.CodeConfirm="    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const showConfirm = useCallback(() => {\n        Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n            });\n        }, []);\n    \n        const showDeleteConfirm = useCallback(() => {\n            Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n                okButtonProps: {\n                    type: 'danger',\n                },\n            });\n        }, []);\n    \n        const showFooterConfirm = useCallback(() => {\n            const { destroy } = Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n                footer: (\n                    <>\n                        <Button key={'cancel'} onClick={() => destroy()}>Cancel</Button>\n                        <Button key={'ok'} type='success'>Delete</Button>\n                    </>\n                ),\n            });\n        }, []);\n    \n        const showAsyncLogic = useCallback(() => {\n            Dialog.confirm({\n                title: 'Are you sure delete this task?',\n                content: 'This is a paragraph',\n                onOk: () => {\n                    return new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve('success');\n                        }, 2000);\n                    })\n                },\n                afterOk: (e, info, status) => {\n                    console.log(e, info, status);\n                }\n            });\n        }, []);\n        \n        return (\n            <div>\n                <Button plain onClick={showConfirm}>Confirm</Button>\n                <Button plain onClick={showDeleteConfirm}>Delete</Button>\n                <Button plain onClick={showFooterConfirm}>Customized footer</Button>\n                <Button plain onClick={showAsyncLogic}>Async logic</Button>\n            </div>\n        )\n    }",e.CodeInfoTip="    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const info = useCallback(() => {\n           Dialog.info({\n               title: 'This is a notification message',\n               content: (\n                   <>\n                       <p>This is a paragraph</p>\n                       <p>This is a paragraph</p>\n                       <p>This is a paragraph</p>\n                   </>\n               ),\n           });\n        }, []);\n    \n        const success = useCallback(() => {\n            Dialog.success({\n                title: 'This is a notification message',\n                content: (\n                    <>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                    </>\n                ),\n            });\n        }, []);\n    \n        const error = useCallback(() => {\n            Dialog.error({\n                title: 'This is a notification message',\n                content: (\n                    <>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                    </>\n                ),\n            });\n        }, []);\n    \n        const warning = useCallback(() => {\n            Dialog.warning({\n                title: 'This is a notification message',\n                content: (\n                    <>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                        <p>This is a paragraph</p>\n                    </>\n                ),\n            });\n        }, []);\n        \n        return (\n            <div>\n                <Button type={'primary'} plain onClick={info}>Info</Button>\n                <Button type={'success'} plain onClick={success}>Success</Button>\n                <Button type={'danger'} plain onClick={error}>Error</Button>\n                <Button type={'warning'} plain onClick={warning}>Warning</Button>\n            </div>\n        )\n    }",e.CodeCloseTimeout="    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const showCloseTimeout = useCallback(() => {\n            let seconds = 5;\n            const { destroy, update } = Dialog.success({\n                title: 'This is a notification message',\n                content: `It will be destroyed after ${seconds} second.`,\n                onOk: () => {\n                    clearInterval(timer);\n                    destroy();\n                }\n            });\n            const timer = setInterval(() => {\n                seconds--;\n                update({\n                    content: `It will be destroyed after ${seconds} second.`,\n                })\n                if(seconds === 0) {\n                    clearInterval(timer);\n                    destroy();\n                }\n            }, 1000);\n        }, []);\n        \n        return (\n            <Button plain onClick={showCloseTimeout}>Close in 5s</Button>\n        )\n    }",e.CodeDestroyAll="    import { useState, useCallback } from 'react';\n    import { Dialog, Button } from \"@kealm/react-components\";\n    \n    \n    function Demo() {\n        const showDestroyAll = useCallback(() => {\n            for(let i = 0; i < 3; i++) {\n                setTimeout(() => {\n                    Dialog.confirm({\n                        title: 'This is a notification message',\n                        content: <Button plain onClick={Dialog.destroyAll}>Click to destroy all</Button>,\n                    });\n                }, i * 500 + 100);\n            }\n        }, []);\n        \n        return (\n            <Button plain onClick={showDestroyAll}>Destroy all</Button>\n        )\n    }",e.CodeMethod="    import { Dialog } from \"@kealm/react-components\"\n\n    const { update, destroy } = Dialog.success({\n        title: '原本的标题',\n        content: '原本的内容',\n    });\n\n    update({\n      title: '修改的标题',\n      content: '修改的内容',\n    });\n    \n    destroy(); // 销毁对话框\n    \n    Dialog.error({\n        title: '错误的标题',\n        content: '错误的内容',\n    });\n    \n    Dialog.destroyAll(); // 销毁全部对话框"})?a.apply(t,l):a)||(e.exports=o)}}]);
//# sourceMappingURL=group-dialog-58eafdf6268f91aaaac2.js.map