(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{503:function(e,t,n){"use strict";n.r(t);var a=n(8),o=n.n(a),l=n(0),r=n.n(l),i=n(147),p=n(24),m=[{param:"manual",des:"是否为手动控制模式",type:"boolean",option:"--",default:"false"},{param:"effect",des:"提供的主题",type:"string",option:"dark / light",default:"dark"},{param:"defaultVisible",des:"默认是否显示",type:"boolean",option:"--",default:"false"},{param:"visible",des:"用于手动控制浮层显示隐藏",type:"boolean",option:"--",default:"false"},{param:"content",des:"显示的内容",type:"string / ReactNode",option:"--",default:"--"},{param:"disabled",des:"是否禁用",type:"boolean",option:"--",default:"false"},{param:"width",des:"宽度",type:"number",option:"--",default:"--"},{param:"placement",des:"出现的位置",type:"string",option:"top / top-start / top-end / bottom / bottom-start / bottom-end / left / left-start / left-end / right / right-start / right-end",default:"top"},{param:"offset",des:"出现位置的偏移量，如 '20, 30' 表示水平方向 20px, 垂直方向 30px，更多表示方法参考 popper.js",type:"string",option:"--",default:"0"},{param:"showArrow",des:"是否显示箭头",type:"boolean",option:"--",default:"true"},{param:"openDelay",des:"触发方式为 hover 时的显示延迟，单位为毫秒",type:"number",option:"--",default:"0"},{param:"closeDelay",des:"触发方式为 hover 时的隐藏延迟，单位为毫秒",type:"number",option:"--",default:"200"},{param:"transitionName",des:"过渡动画样式",type:"string",option:{link:"/component/transition",info:"参考 Transition 组件"},default:"km-popper"}],c=[{name:"onVisibleChange",des:"显示隐藏的回调",callback:"(visible) => void"}],s={TL:"top-start",Top:"top",TR:"top-end",BL:"bottom-start",Bottom:"bottom",BR:"bottom-end",LT:"left-start",Left:"left",LB:"left-end",RT:"right-start",Right:"right",RB:"right-end"};function u(e){return r.a.createElement(i.z,{placement:s[e],content:r.a.createElement(r.a.Fragment,null,r.a.createElement("p",null,"I'm Peppa Pig."),r.a.createElement("p",null,"This is my brother George."))},r.a.createElement(i.c,{plain:!0},e))}t.default=function(){var e=Object(l.useState)(!1),t=o()(e,2),n=t[0],a=t[1],s=Object(l.useState)(!1),d=o()(s,2),f=d[0],b=d[1];return r.a.createElement("div",{className:"page-box"},r.a.createElement("h1",null,"Tooltip 文字提示"),r.a.createElement("p",null,"常用于展示鼠标 hover 时的提示信息。"),r.a.createElement("h2",null,"基本用法"),r.a.createElement("p",null,"最简单的用法，可以通过 manual 配置是否手动触发。"),r.a.createElement("div",{className:"detail-box"},Object(l.useMemo)((function(){return r.a.createElement(i.z,{content:"This is a prompt message"},r.a.createElement(i.c,{plain:!0},"Hover"))}),[]),Object(l.useMemo)((function(){return r.a.createElement(i.z,{content:"This is a prompt message",manual:!0,visible:n},r.a.createElement(i.c,{plain:!0,onClick:function(){return a((function(e){return!e}))}},"Manual"))}),[n])),r.a.createElement(p.d,{code:"    import { useState } from 'react';\n    import { Tooltip, Button } from \"@kealm/react-components\";\n    \n    function Demo() {\n        const [visible, setVisible] = useState(false);\n        \n        return (\n            <div>\n                <Tooltip content={'This is a prompt message'}>\n                    <Button plain>Hover</Button>\n                </Tooltip>\n                <Tooltip content={'This is a prompt message'} manual visible={visible}>\n                    <Button plain onClick={() => setVisible(v => !v)}>Manual</Button>\n                </Tooltip>\n            </div>\n        )\n    }"}),r.a.createElement("h2",null,"禁用"),r.a.createElement("p",null,"通过 disabled 配置是否禁止 Tooltip 显示。"),r.a.createElement("div",{className:"detail-box"},Object(l.useMemo)((function(){return r.a.createElement(i.z,{disabled:f,content:"This is a prompt message"},r.a.createElement(i.c,{plain:!0,onClick:function(){return b((function(e){return!e}))}},f?"Open":"Close"," Tooltip"))}),[f])),r.a.createElement(p.d,{code:"    import { useState } from 'react';\n    import { Tooltip, Button } from \"@kealm/react-components\";\n    \n    function Demo() {\n        const [disabled, setDisabled] = useState(false);\n        \n        return (\n            <Tooltip disabled={disabled} content={'This is a prompt message'}>\n                <Button plain onClick={() => setDisabled(d => !d)}>{disabled ? 'Open' : 'Close'} Tooltip</Button>\n            </Tooltip>\n        )\n    }"}),r.a.createElement("h2",null,"主题"),r.a.createElement("p",null,"Tooltip 组件提供了两个不同的主题：dark 和 light。"),Object(l.useMemo)((function(){return r.a.createElement("div",{className:"detail-box"},r.a.createElement(i.z,{content:"Dark"},r.a.createElement(i.c,{plain:!0},"Dark")),r.a.createElement(i.z,{effect:"light",content:"Light"},r.a.createElement(i.c,{plain:!0},"Light")))}),[]),r.a.createElement(p.d,{code:"    import { Tooltip, Button } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <div>\n            <Tooltip content={'Dark'}>\n                <Button plain>Dark</Button>\n            </Tooltip>\n            <Tooltip effect={'light'} content={'Light'}>\n                <Button plain>Light</Button>\n            </Tooltip>\n        </div>,\n        mountNode\n    );"}),r.a.createElement("h2",null,"更多的内容"),r.a.createElement("p",null,"展示多行文本或者是设置文本内容的格式。"),Object(l.useMemo)((function(){return r.a.createElement("div",{className:"detail-box"},r.a.createElement(i.z,{content:r.a.createElement(r.a.Fragment,null,r.a.createElement("p",null,"I'm Peppa Pig."),r.a.createElement("p",null,"This is my brother George."))},r.a.createElement(i.c,{plain:!0},"More Content")))}),[]),r.a.createElement(p.d,{code:'    import { Tooltip, Button } from "@kealm/react-components";\n    \n    ReactDom.render(\n        <Tooltip content={\n            <>\n                <p>I\'m Peppa Pig.</p>\n                <p>This is my brother George.</p>\n            </>\n        }>\n            <Button plain>More Content</Button>\n        </Tooltip>,\n        mountNode\n    );'}),r.a.createElement("h2",null,"位置"),r.a.createElement("p",null,"拥有12个不同的方向。"),Object(l.useMemo)((function(){return r.a.createElement("div",{className:"detail-box popover-placement-demo"},r.a.createElement(i.r,{type:"flex",justify:"center",gutter:16},r.a.createElement(i.f,null,u("TL")),r.a.createElement(i.f,null,u("Top")),r.a.createElement(i.f,null,u("TR"))),r.a.createElement(i.r,{type:"flex",justify:"space-between"},r.a.createElement(i.f,null,u("LT")),r.a.createElement(i.f,null,u("RT"))),r.a.createElement(i.r,{type:"flex",justify:"space-between"},r.a.createElement(i.f,null,u("Left")),r.a.createElement(i.f,null,u("Right"))),r.a.createElement(i.r,{type:"flex",justify:"space-between"},r.a.createElement(i.f,null,u("LB")),r.a.createElement(i.f,null,u("RB"))),r.a.createElement(i.r,{type:"flex",justify:"center",gutter:16},r.a.createElement(i.f,null,u("BL")),r.a.createElement(i.f,null,u("Bottom")),r.a.createElement(i.f,null,u("BR"))))}),[]),r.a.createElement(p.d,{code:"    import { Tooltip, Button, Row, Col } from \"@kealm/react-components\";\n    \n    const places = {\n        TL: 'top-start',\n        Top: 'top',\n        TR: 'top-end',\n        BL: 'bottom-start',\n        Bottom: 'bottom',\n        BR: 'bottom-end',\n        LT: 'left-start',\n        Left: 'left',\n        LB: 'left-end',\n        RT: 'right-start',\n        Right: 'right',\n        RB: 'right-end',\n    }\n    \n    function renderPlacement(placement) {\n        return (\n            <Tooltip\n                placement={places[placement]}\n                content={\n                    <>\n                        <p>I'm Peppa Pig.</p>\n                        <p>This is my brother George.</p>\n                    </>\n                }\n            >\n                <Button plain>{placement}</Button>\n            </Tooltip>\n        )\n    }\n    \n    ReactDom.render(\n        <div className=\"detail-box popover-placement-demo\">\n            <Row type={'flex'} justify={'center'} gutter={16}>\n                <Col>{renderPlacement('TL')}</Col>\n                <Col>{renderPlacement('Top')}</Col>\n                <Col>{renderPlacement('TR')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'space-between'}>\n                <Col>{renderPlacement('LT')}</Col>\n                <Col>{renderPlacement('RT')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'space-between'}>\n                <Col>{renderPlacement('Left')}</Col>\n                <Col>{renderPlacement('Right')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'space-between'}>\n                <Col>{renderPlacement('LB')}</Col>\n                <Col>{renderPlacement('RB')}</Col>\n            </Row>\n            <Row type={'flex'} justify={'center'} gutter={16}>\n                <Col>{renderPlacement('BL')}</Col>\n                <Col>{renderPlacement('Bottom')}</Col>\n                <Col>{renderPlacement('BR')}</Col>\n            </Row>\n        </div>,\n        mountNode\n    );"}),r.a.createElement(p.a,{title:"Tooltip",propsList:m,eventsList:c}))}}}]);
//# sourceMappingURL=group-tooltip-8c2c6e6a1334b9aa6538.js.map