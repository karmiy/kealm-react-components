(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{499:function(e,t,n){"use strict";n.r(t);var a=n(8),c=n.n(a),l=n(0),o=n.n(l),r=n(147),i=n(24),d=[{param:"defaultChecked",des:"初始是否选中",type:"boolean",option:"--",default:"false"},{param:"checked",des:"指定当前是否选中",type:"boolean",option:"--",default:"false"},{param:"disabled",des:"是否禁用",type:"boolean",option:"--",default:"false"},{param:"activeColor",des:"打开时的背景色",type:"string",option:"--",default:"#1394ff"},{param:"inActiveColor",des:"关闭时的背景色",type:"string",option:"--",default:"#bfbfbf"},{param:"activeContent",des:"选中时的内容",type:"string / ReactNode",option:"--",default:"--"},{param:"inActiveContent",des:"非选中时的内容",type:"string / ReactNode",option:"--",default:"--"},{param:"loading",des:"加载中的开关",type:"boolean",option:"--",default:"false"}],m=[{name:"onChange",des:"变化时回调函数",callback:"(checked: boolean, e: Event) => void"}];t.default=function(){var e=Object(l.useState)(!1),t=c()(e,2),n=t[0],a=t[1],u=Object(l.useState)(!0),s=c()(u,2),h=(s[0],s[1],Object(l.useCallback)((function(e){a(e)}),[]));return o.a.createElement("div",{className:"page-box"},o.a.createElement("h1",null,"Switch 开关"),o.a.createElement("p",null,"表示两种相互对立的状态间的切换，多用于触发「开/关」。"),o.a.createElement("h2",null,"基本用法"),o.a.createElement("p",null,"基础的按钮用法。"),Object(l.useMemo)((function(){return o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.v,{defaultChecked:!0}))}),[]),o.a.createElement(i.d,{code:'    import { Switch } from "@kealm/react-components";\n    \n    ReactDom.render(\n        <Switch defaultChecked={true}></Switch>,\n        mountNode\n    );'}),o.a.createElement("h2",null,"受控开关"),o.a.createElement("p",null,"配合 checked 与 onChange 控制开启与关闭。"),Object(l.useMemo)((function(){return o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.v,{checked:n,onChange:h}))}),[n]),o.a.createElement(i.d,{code:"    import { useState, useCallback } from 'react';\n    import { Switch } from \"@kealm/react-components\";\n    \n    function Demo() {\n        const [checked, setChecked] = useState(false);\n        \n        const onChange = useCallback(c => {\n            setChecked(c);\n        }, []);\n        \n        return <Switch checked={checked} onChange={onChange} />\n    }"}),o.a.createElement("h2",null,"禁用"),o.a.createElement("p",null,"禁用状态的开关。"),Object(l.useMemo)((function(){return o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.r,{gutter:30},o.a.createElement(r.f,null,o.a.createElement(r.v,{disabled:!0})),o.a.createElement(r.f,null,o.a.createElement(r.v,{defaultChecked:!0,disabled:!0}))))}),[]),o.a.createElement(i.d,{code:'    import { Switch, Row, Col } from "@kealm/react-components";\n    \n    ReactDom.render(\n        <Row gutter={30}>\n            <Col><Switch disabled></Switch></Col>\n            <Col><Switch defaultChecked={true} disabled></Switch></Col>\n        </Row>,\n        mountNode\n    );'}),o.a.createElement("h2",null,"自定义颜色"),o.a.createElement("p",null,"自定义在开启和关闭时开关的色彩。"),Object(l.useMemo)((function(){return o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.v,{defaultChecked:!0,activeColor:"#13ce66",inActiveColor:"#ff4949"}))}),[]),o.a.createElement(i.d,{code:"    import { Switch } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Switch defaultChecked={true} activeColor={'#13ce66'} inActiveColor={'#ff4949'}></Switch>,\n        mountNode\n    );"}),o.a.createElement("h2",null,"文字和图标"),o.a.createElement("p",null,"带有文字和图标。"),Object(l.useMemo)((function(){return o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.r,{gutter:30},o.a.createElement(r.f,null,o.a.createElement(r.v,{defaultChecked:!0,activeContent:"开",inActiveContent:"关"})),o.a.createElement(r.f,null,o.a.createElement(r.v,{defaultChecked:!0,activeContent:1,inActiveContent:0})),o.a.createElement(r.f,null,o.a.createElement(r.v,{defaultChecked:!0,activeContent:o.a.createElement(r.l,{type:"check"}),inActiveContent:o.a.createElement(r.l,{type:"close"})}))))}),[]),o.a.createElement(i.d,{code:"    import { Switch, Row, Col, Icon } from \"@kealm/react-components\";\n    \n    ReactDom.render(\n        <Row gutter={30}>\n            <Col>\n                <Switch\n                    defaultChecked={true}\n                    activeContent={'开'}\n                    inActiveContent={'关'}>\n                </Switch>\n            </Col>\n            <Col>\n                <Switch\n                    defaultChecked={true}\n                    activeContent={1}\n                    inActiveContent={0}>\n                </Switch>\n            </Col>\n            <Col>\n                <Switch\n                    defaultChecked={true}\n                    activeContent={<Icon type={'check'}></Icon>}\n                    inActiveContent={<Icon type={'close'}></Icon>}>\n                </Switch>\n            </Col>\n        </Row>,\n        mountNode\n    );"}),o.a.createElement("h2",null,"加载中"),o.a.createElement("p",null,"标识开关操作仍在执行中。"),Object(l.useMemo)((function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.v,{defaultChecked:!0,loading:!0})),o.a.createElement("div",{className:"detail-box"},o.a.createElement(r.v,{loading:!0})))}),[]),o.a.createElement(i.d,{code:'    import { Switch } from "@kealm/react-components";\n    \n    ReactDom.render(\n        <div>\n            <div className="detail-box">\n                <Switch defaultChecked={true} loading></Switch>\n            </div>\n            <div className="detail-box">\n                <Switch loading></Switch>\n            </div>\n        </div>,\n        mountNode\n    );'}),o.a.createElement(i.a,{title:"Switch",propsList:d,eventsList:m}))}}}]);
//# sourceMappingURL=group-switch-18a526f84c4a5f04ecd8.js.map